'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var axios = require('axios');
var FormData = require('form-data');
var fs = require('fs');

var SeafileAPI = function () {
  function SeafileAPI() {
    _classCallCheck(this, SeafileAPI);
  }

  _createClass(SeafileAPI, [{
    key: 'init',
    value: function init(_ref) {
      var server = _ref.server,
          username = _ref.username,
          password = _ref.password,
          token = _ref.token;

      this.server = server;
      this.username = username;
      this.password = password;
      this.token = token; //none
      if (this.token && this.server) {
        this.req = axios.create({
          baseURL: this.server,
          headers: { 'Authorization': 'Token ' + this.token }
        });
      }
      return this;
    }
  }, {
    key: 'initForSeahubUsage',
    value: function initForSeahubUsage(_ref2) {
      var siteRoot = _ref2.siteRoot,
          xcsrfHeaders = _ref2.xcsrfHeaders;

      if (siteRoot && siteRoot.charAt(siteRoot.length - 1) === "/") {
        var server = siteRoot.substring(0, siteRoot.length - 1);
        this.server = server;
      } else {
        this.server = siteRoot;
      }

      this.req = axios.create({
        headers: {
          'X-CSRFToken': xcsrfHeaders
        }
      });
      return this;
    }
  }, {
    key: '_sendPostRequest',
    value: function _sendPostRequest(url, form) {
      if (form.getHeaders) {
        return this.req.post(url, form, {
          headers: form.getHeaders()
        });
      } else {
        return this.req.post(url, form);
      }
    }
  }, {
    key: 'getToken',
    value: function getToken() {
      var _this = this;

      var url = this.server + '/api2/auth-token/';
      axios.post(url, {
        username: this.username,
        password: this.password
      }).then(function (response) {
        _this.token = response.data;
        return _this.token;
      });
    }

    /**
     * Login to server and create axios instance for future usage
     */

  }, {
    key: 'login',
    value: function login() {
      var _this2 = this;

      var url = this.server + '/api2/auth-token/';
      return axios.post(url, {
        username: this.username,
        password: this.password
      }).then(function (response) {
        _this2.token = response.data.token;
        _this2.req = axios.create({
          baseURL: _this2.server,
          headers: { 'Authorization': 'Token ' + _this2.token }
        });
      });
    }
  }, {
    key: 'authPing',
    value: function authPing() {
      var url = this.server + '/api2/auth/ping/';
      return this.req.get(url);
    }

    //---- Account API

  }, {
    key: 'getAccountInfo',
    value: function getAccountInfo() {
      var url = this.server + '/api2/account/info/';
      return this.req.get(url);
    }

    //---- repo API

  }, {
    key: 'listRepos',
    value: function listRepos() {
      var url = this.server + '/api2/repos/';
      return this.req.get(url);
    }

    //---- folder API

  }, {
    key: 'listDir',
    value: function listDir(repoID, dirPath) {
      var opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      var recursive = opts.recursive;

      var url = this.server + '/api2/repos/' + repoID + '/dir/?p=' + dirPath;
      if (recursive) {
        url = url + '&recursive=1';
      }
      return this.req.get(url);
    }
  }, {
    key: 'listWikiDir',
    value: function listWikiDir(slug) {
      var url = this.server + '/api/v2.1/wikis/' + slug + '/dir/';
      return this.req.get(url);
    }

    //---- file api

  }, {
    key: 'getInternalLink',
    value: function getInternalLink(repoID, filePath) {
      var path = encodeURIComponent(filePath);
      var url = this.server + '/api/v2.1/smart-link/?repo_id=' + repoID + '&path=' + path + '&is_dir=false';
      return this.req.get(url);
    }
  }, {
    key: 'getWikiFileContent',
    value: function getWikiFileContent(slug, filePath) {
      var path = encodeURIComponent(filePath);
      var url = this.server + '/api/v2.1/wikis/' + slug + '/content/' + '?p=' + path;
      return this.req.get(url);
    }
  }, {
    key: 'getFileInfo',
    value: function getFileInfo(repoID, filePath) {
      var path = encodeURIComponent(filePath);
      var url = this.server + '/api2/repos/' + repoID + '/file/detail/?p=' + path;
      return this.req.get(url);
    }
  }, {
    key: 'starFile',
    value: function starFile(repoID, filePath) {
      var url = this.server + '/api2/starredfiles/';
      var form = new FormData();
      form.append('repo_id', repoID);
      form.append('p', filePath);
      return this._sendPostRequest(url, form);
    }
  }, {
    key: 'unStarFile',
    value: function unStarFile(repoID, filePath) {
      var url = this.server + "/api2/starredfiles/?repo_id=" + repoID + "&p=" + filePath;
      return this.req.delete(url);
    }
  }, {
    key: 'getFileDownloadLink',
    value: function getFileDownloadLink(repoID, filePath) {
      // reuse default to 1 to eliminate cross domain request problem
      //   In browser, the browser will send an option request to server first, the access Token
      //   will become invalid if reuse=0
      var path = encodeURIComponent(filePath);
      var url = this.server + '/api2/repos/' + repoID + '/file/?p=' + path + '&reuse=1';
      return this.req.get(url);
    }
  }, {
    key: 'getFileContent',
    value: function getFileContent(downloadLink) {
      return axios.create().get(downloadLink);
    }
  }, {
    key: 'getUpdateLink',
    value: function getUpdateLink(repoID, folderPath) {
      var url = this.server + '/api2/repos/' + repoID + '/update-link/?p=' + folderPath;
      return this.req.get(url);
    }
  }, {
    key: 'updateFile',
    value: function updateFile(uploadLink, filePath, fileName, data) {
      var formData = new FormData();
      formData.append("target_file", filePath);
      formData.append("filename", fileName);
      var blob = new Blob([data], { type: "text/plain" });
      formData.append("file", blob);
      return axios.create()({
        method: 'post',
        url: uploadLink,
        data: formData
      });
    }
  }, {
    key: 'uploadImage',
    value: function uploadImage(uploadLink, formData) {
      return axios.create()({
        method: "post",
        data: formData,
        url: uploadLink
      });
    }
  }, {
    key: 'getFileHistory',
    value: function getFileHistory(repoID, folderPath) {
      var url = this.server + "/api2/repos/" + repoID + "/file/history/?p=" + folderPath;
      return this.req.get(url);
    }
  }, {
    key: 'getUploadLink',
    value: function getUploadLink(repoID, folderPath) {
      var url = this.server + '/api2/repos/' + repoID + '/upload-link/?p=' + folderPath + '&from=web';
      return this.req.get(url);
    }
  }, {
    key: 'getSharedRepos',
    value: function getSharedRepos() {
      var url = this.server + '/api2/shared-repos/';
      return this.req.get(url);
    }
  }, {
    key: 'getBeSharedRepos',
    value: function getBeSharedRepos() {
      var url = this.server + '/api2/beshared-repos/';
      return this.req.get(url);
    }

    //----file and dir API

  }, {
    key: 'createDir',
    value: function createDir(repoID, dirPath) {
      var url = this.server + '/api2/repos/' + repoID + '/dir/?p=' + dirPath;
      var form = new FormData();
      form.append('operation', 'mkdir');
      return this._sendPostRequest(url, form);
    }
  }, {
    key: 'createFile',
    value: function createFile(repoID, filePath) {
      var url = this.server + '/api2/repos/' + repoID + '/file/?p=' + filePath;
      var form = new FormData();
      form.append('operation', 'create');
      return this._sendPostRequest(url, form);
    }
  }, {
    key: 'renameFile',
    value: function renameFile(repoID, filePath, newfileName) {
      var url = this.server + '/api/v2.1/repos/' + repoID + '/file/?p=' + filePath;
      var form = new FormData();
      form.append('operation', 'rename');
      form.append('newname', newfileName);
      return this._sendPostRequest(url, form);
    }
  }, {
    key: 'deleteFile',
    value: function deleteFile(repoID, filePath) {
      var url = this.server + '/api2/repos/' + repoID + '/file/?p=' + filePath;
      return this.req.delete(url);
    }

    //function don't have response

  }, {
    key: 'renameDir',
    value: function renameDir(repoID, dirPath, newdirName) {
      var url = this.server + '/api2/repos/' + repoID + '/dir/?p=' + dirPath;
      var form = new FormData();
      form.append("operation", 'rename');
      form.append("newname", newdirName);
      return this._sendPostRequest(url, form);
    }
  }, {
    key: 'deleteDir',
    value: function deleteDir(repoID, dirPath) {
      var url = this.server + '/api2/repos/' + repoID + '/dir/?p=' + dirPath;
      return this.req.delete(url);
    }

    // copy files or dirs

  }, {
    key: 'copyDir',
    value: function copyDir(repoID, dstrepoID, dstfilePath, filesName) {
      var url = this.server + '/api2/repos/' + repoID + '/fileops/copy/';
      var form = new FormData();
      form.append('dst_repo', dstrepoID);
      form.append('dst_dir', dstfilePath);
      form.append('file_names', filesName);
      return this._sendPostRequest(url, form);
    }
  }, {
    key: 'searchFiles',
    value: function searchFiles(searchParams, cancelToken) {
      var url = this.server + '/api2/search/';
      return this.req.get(url, { params: searchParams, cancelToken: cancelToken });
    }
  }, {
    key: 'getSource',
    value: function getSource() {
      var CancelToken = axios.CancelToken;
      var source = CancelToken.source();
      return source;
    }

    //---- ShareLink API 

  }, {
    key: 'createShareLink',
    value: function createShareLink(repoID, path, password, expireDays) {
      var url = this.server + '/api/v2.1/share-links/';
      var form = new FormData();
      form.append('path', path);
      form.append('repo_id', repoID);
      if (password) {
        form.append('password', password);
      }
      if (expireDays) {
        form.append('expire_days', expireDays);
      }
      return this._sendPostRequest(url, form);
    }
  }, {
    key: 'deleteShareLink',
    value: function deleteShareLink(token) {
      var url = this.server + '/api/v2.1/share-links/' + token + '/';
      return this.req.delete(url);
    }
  }, {
    key: 'listAllShareLinks',
    value: function listAllShareLinks() {
      var url = this.server + '/api/v2.1/share-links/';
      return this.req.get(url);
    }
  }, {
    key: 'listRepoShareLinks',
    value: function listRepoShareLinks(repoID) {
      var url = this.server + '/api/v2.1/share-links/?repo_id=' + repoID;
      return this.req.get(url);
    }
  }, {
    key: 'getShareLink',
    value: function getShareLink(repoID, path) {
      var url = this.server + '/api/v2.1/share-links/?repo_id=' + repoID + '&path=' + path;
      return this.req.get(url);
    }
  }]);

  return SeafileAPI;
}();

exports.SeafileAPI = SeafileAPI;